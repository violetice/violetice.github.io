<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用 1Panel 安装 Umami，并接入博客</title>
    <link href="/po/eb01ff65262a/"/>
    <url>/po/eb01ff65262a/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>接上文：<a href="https://www.vlice.cn/po/edf02dacb27f/">初次使用 1Panel，部署博客实战记录 | 紫冰的小屋</a></p><p>1Panel 安装完成，博客部署成功。我开这个服务器主要还是为了用 Umami 统计。</p><div class="note note-danger">            <p>注意：这是全程记录，而不是教程。精简教程之后再写。</p>          </div><h1 id="1-简单的介绍一下-Umami"><a href="#1-简单的介绍一下-Umami" class="headerlink" title="1. 简单的介绍一下 Umami"></a>1. 简单的介绍一下 Umami</h1><p><em>Umami</em> 是 Google Analytics 的简单、快速、注重隐私的替代方案。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[1Panel 安装 umami 网站统计 | 自行搭建一个网站统计工具 不限PV-日有所思博客](https://www.thinks365.com/1panel-安装-umami-网站统计/)">[1]</span></a></sup></p><p><strong>实时数据监控</strong>：提供实时网站访问数据，包括访客数量、页面浏览量等。</p><p><strong>流量来源追踪</strong>：分析和显示网站访问流量的来源，包括搜索引擎、推荐网站等。</p><p><strong>地理位置分析</strong>：展示访客的地理位置分布情况，帮助了解用户所在地区分布。</p><p><strong>关键指标跟踪</strong>：提供关键指标如会话时长、页面停留时间等，帮助优化用户体验和网站内容。</p><h1 id="2-安装-Umami"><a href="#2-安装-Umami" class="headerlink" title="2. 安装 Umami"></a>2. 安装 Umami</h1><p>前往应用商店，搜索 Umami，点击安装。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0209/81e2b58fdf730468.png" srcset="/img/loading.gif" lazyload alt="Umami"><figcaption aria-hidden="true">Umami</figcaption></figure></p><p>有个前置条件，需要安装数据库。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0209/0a75b14b13203fa4.png" srcset="/img/loading.gif" lazyload alt="缺少数据库"><figcaption aria-hidden="true">缺少数据库</figcaption></figure></p><h2 id="2-1-安装数据库"><a href="#2-1-安装数据库" class="headerlink" title="2.1. 安装数据库"></a>2.1. 安装数据库</h2><p>点击去安装，就会进入 MySQL 的安装界面。</p><p>但是我比较叛逆，我非要安装 MariaDB，反正也是 MySQL 家族的。</p><p>主要是我昨天尝试的时候，用 PostgreSQL 来安装，居然安装失败了。但是没有错误日志，我也不知道是啥问题。</p><h3 id="2-1-1-安装-MariaDB"><a href="#2-1-1-安装-MariaDB" class="headerlink" title="2.1.1. 安装 MariaDB"></a>2.1.1. 安装 MariaDB</h3><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0209/9669836c70bf996e.png" srcset="/img/loading.gif" lazyload alt="安装 MariaDB"><figcaption aria-hidden="true">安装 MariaDB</figcaption></figure></p><p>【等吧……】</p><p>安装完成，但是用不了。要用 MariaDB 那就得手写 Docker。还是安装 MySQL 吧，手写的方案之后再研究。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0209/8740a669a2d2bb7b.png" srcset="/img/loading.gif" lazyload alt="读取不到"><figcaption aria-hidden="true">读取不到</figcaption></figure></p><h3 id="2-1-2-安装-MySQL"><a href="#2-1-2-安装-MySQL" class="headerlink" title="2.1.2. 安装 MySQL"></a>2.1.2. 安装 MySQL</h3><p> 也就只有这一个选择了，别的都用不了。</p><p>点击去安装，端口改成 3307，毕竟 MariaDB 占用了 3306，直接确认。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0209/1d642b552c84ee99.png" srcset="/img/loading.gif" lazyload alt="安装 MySQL"><figcaption aria-hidden="true">安装 MySQL</figcaption></figure></p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0209/91590446cc893018.png" srcset="/img/loading.gif" lazyload alt="安装完成"><figcaption aria-hidden="true">安装完成</figcaption></figure></p><h2 id="2-2-自动安装-Umami"><a href="#2-2-自动安装-Umami" class="headerlink" title="2.2. 自动安装 Umami"></a>2.2. 自动安装 Umami</h2><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0209/0349c740797b78ce.png" srcset="/img/loading.gif" lazyload alt="全部默认"><figcaption aria-hidden="true">全部默认</figcaption></figure></p><p>先用自动安装试试看吧，不行再手动处理。</p><p>安装是安上了，但是数据库连错了。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0209/49346e1affcd535a.png" srcset="/img/loading.gif" lazyload alt="mysql:3306"><figcaption aria-hidden="true">mysql:3306</figcaption></figure></p><p>这是连到 MariaDB 去了。</p><p>我还是手动安装吧，就用 PostgreSQL 做数据库的。</p><h2 id="2-3-手动安装-Umami"><a href="#2-3-手动安装-Umami" class="headerlink" title="2.3. 手动安装 Umami"></a>2.3. 手动安装 Umami</h2><p>作了一番尝试，在面板里拉取镜像太慢了。所以在本机装了一个 Docker，专门用来拉取 image。</p><p>现在不单单是 Docker Hub (<em>docker.io</em>) 了，还有GitHub (<em>ghcr.io</em>)，所以更方便了。</p><p>pkgs发布页：<a href="https://github.com/umami-software/umami/pkgs/container/umami">Package umami</a></p><h3 id="2-3-1-拉取-Umami-镜像"><a href="#2-3-1-拉取-Umami-镜像" class="headerlink" title="2.3.1. 拉取 Umami 镜像"></a>2.3.1. 拉取 Umami 镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull ghcr.io/umami-software/umami:postgresql-latest<br></code></pre></td></tr></table></figure><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0209/6b0cf8357cf8211a.png" srcset="/img/loading.gif" lazyload alt="拉取镜像"><figcaption aria-hidden="true">拉取镜像</figcaption></figure></p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0209/815b260b8fc520c1.png" srcset="/img/loading.gif" lazyload alt="拉取完成"><figcaption aria-hidden="true">拉取完成</figcaption></figure></p><h3 id="2-3-2-导出镜像包"><a href="#2-3-2-导出镜像包" class="headerlink" title="2.3.2. 导出镜像包"></a>2.3.2. 导出镜像包</h3><p>由于是要放到云服务器上的，所以需要导出镜像。</p><p>Docker 是虚拟容器，所有文件都不在本机，而是在容器里面，本机无法直接拿到。</p><p>在这部分耽误了一点时间，好在找到了导出方法。<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Docker - 实现本地镜像的导出、导入（export、import、save、load）](https://www.hangge.com/blog/cache/detail_2411.html)">[2]</span></a></sup></p><p>为了防止大家继续上当受骗，我这直接用正确方式。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">列出所有镜像</span><br>docker images<br></code></pre></td></tr></table></figure><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0209/7afbb1231734146e.png" srcset="/img/loading.gif" lazyload alt="镜像列表"><figcaption aria-hidden="true">镜像列表</figcaption></figure></p><p>由于 Repository 实在是过于冗长，所以操作一下。单纯导出还是很方便的。<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[解决 docker load -i 导入镜像后名称为 none_docker导入镜像没有名字-CSDN博客](https://blog.csdn.net/qq12547345/article/details/119993542)">[3]</span></a></sup></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">重设镜像Tag</span><br>docker tag &lt;Image ID&gt; &lt;Repository&gt;:&lt;Tag&gt;<br></code></pre></td></tr></table></figure><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0209/aa3190c98fa1d68b.png" srcset="/img/loading.gif" lazyload alt="重设Tag"><figcaption aria-hidden="true">重设Tag</figcaption></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">导出镜像包</span><br>docker save -o &lt;Image Name&gt;-&lt;Tag&gt;.tar &lt;Image ID&gt;  #无标识的导出<br>docker save -o &lt;Image Name&gt;-&lt;Tag&gt;.tar &lt;Repository&gt;:&lt;Tag&gt;  #有标识的导出<br></code></pre></td></tr></table></figure><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0209/e04ea847f00e979a.png" srcset="/img/loading.gif" lazyload alt="导出镜像"><figcaption aria-hidden="true">导出镜像</figcaption></figure></p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0209/5c932f3105915845.png" srcset="/img/loading.gif" lazyload alt="镜像标识"><figcaption aria-hidden="true">镜像标识</figcaption></figure></p><p>只要包里 RepoTags 有标识内容，那导入进 Docker 就不会是 None。之前尝试就是这里被坑了。</p><h3 id="2-3-3-服务器导入镜像包"><a href="#2-3-3-服务器导入镜像包" class="headerlink" title="2.3.3. 服务器导入镜像包"></a>2.3.3. 服务器导入镜像包</h3><p>怎么上传服务器就不用我多说了吧。我就简单说说，不会的自己去查吧。</p><p>我用的<a href="https://www.hostbuf.com/t/988.html">FinalShell 版本4.5.12,更新日期2024.10.30 - FinalShell官网</a></p><p>Xshell 可以用 Lrzsz，也可以用 1Panel 面板上传。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0209/125d7bd81d24e05f.png" srcset="/img/loading.gif" lazyload alt="上传到服务器"><figcaption aria-hidden="true">上传到服务器</figcaption></figure></p><p>有点慢，是我这宽带拖后腿了。上下行不对等的小水管是真的难受。下载能到20M&#x2F;s。</p><p>因为 1Panel 都是 root 权限管理的，所以 Docker 也是 root。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">切换root用户</span><br>sudo -i<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">导入镜像包</span><br>docker load -i /home/ecs-user/umami-pgsql-2.15.1.tar<br></code></pre></td></tr></table></figure><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0209/a2c7e11991185c83.png" srcset="/img/loading.gif" lazyload alt="导入完成"><figcaption aria-hidden="true">导入完成</figcaption></figure></p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0209/fcac0ed05c54f5b8.png" srcset="/img/loading.gif" lazyload alt="面板上也有了"><figcaption aria-hidden="true">面板上也有了</figcaption></figure></p><p>导入镜像包完成！</p><h3 id="2-3-4-创建编排"><a href="#2-3-4-创建编排" class="headerlink" title="2.3.4. 创建编排"></a><del>2.3.4. 创建编排</del></h3><p><del>这部分有点烧脑，我尽量写的简单易懂。</del>【先去睡了，明天再写 2025-2-9 23:38:56】</p><p>【刚收车回来，今天有点累，只能写一个小时的。2025年2月10日23:09:11】</p><p>整段垮掉，不用那么复杂的。</p><h3 id="2-3-5-使用应用商店安装模板"><a href="#2-3-5-使用应用商店安装模板" class="headerlink" title="2.3.5. 使用应用商店安装模板"></a>2.3.5. 使用应用商店安装模板</h3><p>把应用商店的编排模板修改一下，就可以用来安装了。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0210/d4c83bc45ae8a0c4.png" srcset="/img/loading.gif" lazyload alt="修改模板"><figcaption aria-hidden="true">修改模板</figcaption></figure></p><p>把镜像修改成我们导入的，拉取镜像关掉。其他都不用动，直接轻松秒杀。</p><p>本地有了镜像，安装速度也非常快。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0210/8173da0fb44d1de9.png" srcset="/img/loading.gif" lazyload alt="安装完成"><figcaption aria-hidden="true">安装完成</figcaption></figure></p><h2 id="2-4-反向代理，让外网访问"><a href="#2-4-反向代理，让外网访问" class="headerlink" title="2.4. 反向代理，让外网访问"></a>2.4. 反向代理，让外网访问</h2><p>域名解析好之后，代理到 3000 端口。这样外网就能访问了。</p><p>然后配置一下https，上一篇写过，我就不重复了。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0211/849c86ea1036fb09.png" srcset="/img/loading.gif" lazyload alt="反向代理"><figcaption aria-hidden="true">反向代理</figcaption></figure></p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0211/ccdf6ce220a9b750.png" srcset="/img/loading.gif" lazyload alt="成功访问"><figcaption aria-hidden="true">成功访问</figcaption></figure></p><div class="note note-success">            <p>默认账号：admin，密码：umami</p><p>这玩意也没个日志提示，不查还真不知道了。</p>          </div><h1 id="3-博客接入-Umami"><a href="#3-博客接入-Umami" class="headerlink" title="3. 博客接入 Umami"></a>3. 博客接入 Umami</h1><h2 id="3-1-Umami-初始设置"><a href="#3-1-Umami-初始设置" class="headerlink" title="3.1. Umami 初始设置"></a>3.1. Umami 初始设置</h2><h3 id="3-1-1-语言"><a href="#3-1-1-语言" class="headerlink" title="3.1.1. 语言"></a>3.1.1. 语言</h3><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0211/1f9daf0bb7037b9f.png" srcset="/img/loading.gif" lazyload alt="有中文"><figcaption aria-hidden="true">有中文</figcaption></figure></p><h3 id="3-1-2-添加网站"><a href="#3-1-2-添加网站" class="headerlink" title="3.1.2. 添加网站"></a>3.1.2. 添加网站</h3><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0211/21a4389e289d84a5.png" srcset="/img/loading.gif" lazyload alt="点击去设置"><figcaption aria-hidden="true">点击去设置</figcaption></figure></p><p>直接点进去，添加一个网站。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0211/c7515f5e0067aebd.png" srcset="/img/loading.gif" lazyload alt="添加网站"><figcaption aria-hidden="true">添加网站</figcaption></figure></p><h3 id="3-1-3-创建-API-用户"><a href="#3-1-3-创建-API-用户" class="headerlink" title="3.1.3. 创建 API 用户"></a>3.1.3. 创建 API 用户</h3><p><del>创建一个【仅浏览量】权限的用户，用于调用 API。</del>【天坑】</p><p>创建一个【管理员】权限的用户，用于调用 API。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0211/ee46042b9edbf4d0.png" srcset="/img/loading.gif" lazyload alt="用于API的账户"><figcaption aria-hidden="true">用于API的账户</figcaption></figure></p><p>记住这个账号和密码，还要用的。</p><h2 id="3-2-配置博客-yml"><a href="#3-2-配置博客-yml" class="headerlink" title="3.2. 配置博客 yml"></a>3.2. 配置博客 yml</h2><p>我的主题是 <a href="https://hexo.fluid-dev.com/docs/">Fluid</a>，你用的可能不一样，但持续更新的版本，应该都是支持 Umami 的，配置也是大差不差。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0211/f53130e6e08a0661.png" srcset="/img/loading.gif" lazyload alt="配置文件"><figcaption aria-hidden="true">配置文件</figcaption></figure></p><p>都不难理解，主要难点在于 Token 的获取。其他我就简单表述了。</p><table><thead><tr><th>配置项</th><th>说明</th></tr></thead><tbody><tr><td>src</td><td>js脚本文件：设置 &gt; 网站 &gt; 编辑 &gt; 跟踪代码，直接复制src</td></tr><tr><td>website_id</td><td>站点ID：设置 &gt; 网站 &gt; 编辑，网站ID有复制按钮</td></tr><tr><td>domains</td><td>只统计正式域名，测试域名和没套CDN的裸连都不统计。</td></tr><tr><td>start_time</td><td>统计的起始时间，就用开始写博客那天好了。</td></tr><tr><td>api_server</td><td>第一项src，尾部 &#x2F;script.js 改成 &#x2F;api</td></tr></tbody></table><h3 id="3-2-1-登录-API-获取-Token"><a href="#3-2-1-登录-API-获取-Token" class="headerlink" title="3.2.1. 登录 API 获取 Token"></a>3.2.1. 登录 API 获取 Token</h3><p>还记得前面创建的 API 用户吗？现在要用了。<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Authentication – Docs - Umami](https://umami.is/docs/api/authentication)">[4]</span></a></sup></p><div class="note note-info">            <p>敲黑板！必须得是管理员身份才行，否则抛「401 Unauthorized」权限错误。</p>          </div><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/api/auth/login</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>umami.xxxx.com<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>57<br><br><span class="language-json"><span class="hljs-punctuation">&#123;</span></span><br><span class="language-json">  <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;username&quot;</span><span class="hljs-punctuation">,</span></span><br><span class="language-json">  <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;password&quot;</span></span><br><span class="language-json"><span class="hljs-punctuation">&#125;</span></span><br></code></pre></td></tr></table></figure><p><strong>Response</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;o1bToUEyoSOGHPZ3HqF80GHctDBkiQQQHqst2FYE4ZIB1Oe9+WbRsPPJ6Gbma1aL9DK86qdFDSC40a0Fx3f3wQyXsVlMvjfYAO2akefsY/hnJGYMzu0+7KTFNnhsViZlYNzDEa7m7u905kZCR9vZBwb8bDM1URRRIleBm3KISfhXhDt6WAOjY/43uB2AzF7iJgHvaiK+adZ0XLaaNgxcsEvu42EC1L6cGpkUDs6TuhTUkMDABRubVXu8nGrh3YnU9Dzf0jYfnkQ/XZ9M46nGrh9qJvacyxui5bKslGIX6/rpApKA3+ZsHn5jlBQwtF570rZ4y246EHQV/lIRIA5GCtMg7FYZMSKFhw==&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;user&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;be0bdbe9-e932c-d3bc-5479-1148a955fc6&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;username&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;role&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;view-only&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;createdAt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2025-02-10T16:40:13.335Z&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;isAdmin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>随便你们怎么请求，我是用的国产软件<a href="https://apifox.com/">Apifox</a>。</p><p>Token 拿到手了，建议用引号包起来。</p><p>【卧槽，写嗨了，溜了溜了。2025年2月11日 02:36:34】</p><h2 id="3-3-修复-Fluid-主题兼容问题"><a href="#3-3-修复-Fluid-主题兼容问题" class="headerlink" title="3.3. 修复 Fluid 主题兼容问题"></a>3.3. 修复 Fluid 主题兼容问题</h2><div class="note note-info">            <p>【2025年2月11日 22:57:11】</p><p>这玩意是真的复杂，而且版本更新也快，新版本又是新问题。和 Fluid v1.8.9（在用版本）存在兼容性冲突。需要改代码才行。</p><p>而且我没写完就上线了，还直接刷新了CDN。主要是为了测试，果不其然的出问题了。</p>          </div><p>v2.15.1 版本的 Umami，即便是 GET 请求，也需要携带 Bearer Token。</p><p>检查一下代码，我直呼好家伙！这样真的合适吗？半成本发版！！</p><p>文件路径： hexo-theme-fluid&#x2F;source&#x2F;js&#x2F;umami-view.js</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0211/6d94a16163a9ea25.png" srcset="/img/loading.gif" lazyload alt="我真的无话可说"><figcaption aria-hidden="true">我真的无话可说</figcaption></figure></p><h3 id="3-3-1-修复请求错误"><a href="#3-3-1-修复请求错误" class="headerlink" title="3.3.1. 修复请求错误"></a>3.3.1. 修复请求错误</h3><p>找到 request_header，这样修改就行了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 构造请求头</span><br><span class="hljs-keyword">const</span> request_header = &#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>  <span class="hljs-attr">headers</span>: &#123;<br>    <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span>,<br>    <span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">`Bearer <span class="hljs-subst">$&#123;token&#125;</span>`</span>,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="3-3-2-修复显示问题"><a href="#3-3-2-修复显示问题" class="headerlink" title="3.3.2. 修复显示问题"></a>3.3.2. 修复显示问题</h3><p>还是这个文件，下面一点的位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取站点统计数据</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">siteStats</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    ......<br>    <span class="hljs-keyword">const</span> uniqueVisitors = data.&#123;uniques -&gt; visitors&#125;.<span class="hljs-property">value</span>; <span class="hljs-comment">// 获取独立访客数</span><br>    <span class="hljs-comment">//改成这样，不知道是不是Umami版本问题，字段都换了。</span><br>    <span class="hljs-keyword">const</span> uniqueVisitors = data.<span class="hljs-property">visitors</span>.<span class="hljs-property">value</span>;<br>......<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;-1&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>检查底部和文章页，能正常显示访问量。那就完成了。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0211/75495d2b58d7a0fe.png" srcset="/img/loading.gif" lazyload alt="网站底部"><figcaption aria-hidden="true">网站底部</figcaption></figure></p><h1 id="4-结语"><a href="#4-结语" class="headerlink" title="4. 结语"></a>4. 结语</h1><p>至此，Hexo 博客 Fluid 主题，成功接入 Umami 统计。挂个横幅庆祝一下。</p><div class="note note-danger">            <p>热烈庆祝 Umami 统计系统接入工程取得圆满成功！</p>          </div><p>这一路也是踩了好几个坑，主要是半成品，想起来就想笑。</p><p>已经提交了PR，但是有人在我之前就修改了。我也只能做一些注释上的加注。以及对配置文件的详细注解。</p><p><a href="https://github.com/fluid-dev/hexo-theme-fluid/pull/1171">:bug: Fix: 基于 Umami v2.15.1 的修复 by violetice · Pull Request #1171 · fluid-dev&#x2F;hexo-theme-fluid</a></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.thinks365.com/1panel-%E5%AE%89%E8%A3%85-umami-%E7%BD%91%E7%AB%99%E7%BB%9F%E8%AE%A1/">1Panel 安装 umami 网站统计 | 自行搭建一个网站统计工具 不限PV-日有所思博客</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.hangge.com/blog/cache/detail_2411.html">Docker - 实现本地镜像的导出、导入（export、import、save、load）</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://blog.csdn.net/qq12547345/article/details/119993542">解决 docker load -i 导入镜像后名称为 none_docker导入镜像没有名字-CSDN博客</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://umami.is/docs/api/authentication">Authentication – Docs - Umami</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>网站运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>运维</tag>
      
      <tag>实战</tag>
      
      <tag>部署</tag>
      
      <tag>1Panel</tag>
      
      <tag>Umami</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初次使用 1Panel，部署博客实战记录</title>
    <link href="/po/edf02dacb27f/"/>
    <url>/po/edf02dacb27f/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p> 为什么突然要用 1Panel？还得从阿里云坑我说起。</p><p>我原以为轻应用服务器才是最便宜，没想到 ECS 居然打折！！不到 20 元一个月本体 +7 元的硬盘，这你能受得了吗？</p><p>还好轻应用服务器还处于 5 天无理由退款中，现在 ICP 备案也过了，果断退款！支付宝到账 35 元×3</p><div class="note note-success">            <p>经济型e【ecs.e-c1m1.large】2核2G</p><p>ESSD Entry 20GiB</p><p>Alibaba Cloud Linux 3.2104 LTS 64位</p><p>按量付费（CDT）100Mbps 拉满，每个月送 200G 流量呢，比又拍云还壕。</p>          </div><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0208/7721c43336fddd76.png" srcset="/img/loading.gif" lazyload alt="ecs.e-c1m1.large"><figcaption aria-hidden="true">ecs.e-c1m1.large</figcaption></figure></p><p>两个月也是折扣价，但是三个月就是目录价了，所以一次性开两个月就行了。支付宝消费 53.74 元。</p><h1 id="1-1Panel-介绍"><a href="#1-1Panel-介绍" class="headerlink" title="1. 1Panel 介绍"></a>1. 1Panel 介绍</h1><p>基于 Go 语言开发，天然具备高并发处理能力和跨平台优势，核心代码更精简高效。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[1Panel vs 宝塔面板：现代化运维工具的全方位对比 - 知乎](https://zhuanlan.zhihu.com/p/20575317573)">[1]</span></a></sup></p><p>深度整合 Docker 容器技术，所有应用通过容器隔离部署，避免环境依赖冲突，支持一键迁移和弹性扩缩容。</p><p>200+ 应用均提供 Docker 镜像，包含 Nginx、MySQL 等基础服务及 JupyterLab、GitLab 等开发工具。</p><h1 id="2-安装-1Panel"><a href="#2-安装-1Panel" class="headerlink" title="2. 安装 1Panel"></a>2. 安装 1Panel</h1><p>官网：<a href="https://1panel.cn/">1Panel - 现代化、开源的 Linux 服务器运维管理面板 - 官网</a></p><p>ECS 用的 Ali-C-Linux 基于 CentOS 改造实现，所以用 CentOS 的安装方式就行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;&amp; sh quick_start.sh<br></code></pre></td></tr></table></figure><p>包大小只有 44.5M，比宝塔轻便太多了。宝塔商业化之后我是真不喜欢。他也不搞分支版本，愣是把商业化内容塞满整个面板。1Panel 也是不满宝塔商业化之后的产物。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0208/415e639b6f0db8d3.png" srcset="/img/loading.gif" lazyload alt="选择语言"><figcaption aria-hidden="true">选择语言</figcaption></figure></p><p>毕竟是国内组织的开源项目，那当然是有官中的。<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[飞致云 - 为数字经济时代创造好软件](https://www.fit2cloud.com/)">[2]</span></a></sup></p><h2 id="2-1-sudo-权限"><a href="#2-1-sudo-权限" class="headerlink" title="2.1. sudo 权限"></a>2.1. sudo 权限</h2><p>选择语言之后，没有 root 权限的机子就会报错。Ali-C-Linux 只能用 ecs-user，这是必然报错的。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0208/9c8a3d12a8d65dee.png" srcset="/img/loading.gif" lazyload alt="没有权限"><figcaption aria-hidden="true">没有权限</figcaption></figure></p><p>由于安装脚本已经下载完毕，直接执行即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo sh quick_start.sh<br></code></pre></td></tr></table></figure><h2 id="2-2-Alibaba-Cloud-Linux-3-安装-Docker"><a href="#2-2-Alibaba-Cloud-Linux-3-安装-Docker" class="headerlink" title="2.2. Alibaba Cloud Linux 3 安装 Docker"></a>2.2. Alibaba Cloud Linux 3 安装 Docker</h2><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0208/89717550c89ab2c0.png" srcset="/img/loading.gif" lazyload alt="不支持Ali-Lnux"><figcaption aria-hidden="true">不支持Ali-Lnux</figcaption></figure></p><p>翻译：不支持的分发 “alinux”</p><p>阿里云官网有教程，照着做就好。<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[安装Docker并使用镜像仓库ACR_云服务器 ECS(ECS)-阿里云帮助中心](https://help.aliyun.com/zh/ecs/use-cases/install-and-use-docker)">[3]</span></a></sup></p><p>现在是为了安装 1Panel，所以没必要完全照做，只要环境构建完成即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">添加Docker软件包源</span><br>sudo wget -O /etc/yum.repos.d/docker-ce.repo http://mirrors.cloud.aliyuncs.com/docker-ce/linux/centos/docker-ce.repo<br>sudo sed -i &#x27;s|https://mirrors.aliyun.com|http://mirrors.cloud.aliyuncs.com|g&#x27; /etc/yum.repos.d/docker-ce.repo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Alibaba Cloud Linux3专用的dnf源兼容插件</span><br>sudo dnf -y install dnf-plugin-releasever-adapter --repo alinux3-plus<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装Docker社区版本，容器运行时containerd.io，以及Docker构建和Compose插件</span><br>sudo dnf -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<br></code></pre></td></tr></table></figure><p>执行完这四条命令即可，后面的不用管了。Docker 安装完毕</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0208/bbb1cb49157ae8fe.png" srcset="/img/loading.gif" lazyload alt="Docker 安装完毕"><figcaption aria-hidden="true">Docker 安装完毕</figcaption></figure></p><p>回到 1Panel 安装命令，执行一遍。全部默认即可，到时候都能改。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo sh quick_start.sh<br></code></pre></td></tr></table></figure><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0208/8181096a44675cfc.png" srcset="/img/loading.gif" lazyload alt="1Panel安装完成"><figcaption aria-hidden="true">1Panel安装完成</figcaption></figure></p><h2 id="2-3-开放端口"><a href="#2-3-开放端口" class="headerlink" title="2.3. 开放端口"></a>2.3. 开放端口</h2><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0208/818f70ed30c038a3.png" srcset="/img/loading.gif" lazyload alt="开放端口"><figcaption aria-hidden="true">开放端口</figcaption></figure></p><p>我这里默认端口 30937，开放完就可以用 ip 访问了。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0208/5e1e3689d76d8398.png" srcset="/img/loading.gif" lazyload alt="登录界面"><figcaption aria-hidden="true">登录界面</figcaption></figure></p><p>修改账号密码就不用我多说了吧。</p><h1 id="3-部署博客"><a href="#3-部署博客" class="headerlink" title="3. 部署博客"></a>3. 部署博客</h1><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0208/c73758c1e53c5009.png" srcset="/img/loading.gif" lazyload alt="未检测到 OpenResty"><figcaption aria-hidden="true">未检测到 OpenResty</figcaption></figure></p><h2 id="3-1-安装-OpenResty"><a href="#3-1-安装-OpenResty" class="headerlink" title="3.1. 安装 OpenResty"></a>3.1. 安装 OpenResty</h2><p>1Panel 网站模块需要 OpenResty。【某 php 环境一键脚本就用的这个，也算是老面孔了】</p><p>去阿里云安全组开放 80&#x2F;443 端口。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0208/0af3ddb6aa8f8ab7.png" srcset="/img/loading.gif" lazyload alt="开放 80&#x2F;443 端口"><figcaption aria-hidden="true">开放 80/443 端口</figcaption></figure></p><p>在 1Panel 应用商店安装 OpenResty，全部保持默认即可。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0208/7408e37eda2f6e7d.png" srcset="/img/loading.gif" lazyload alt="正在安装"><figcaption aria-hidden="true">正在安装</figcaption></figure></p><p>这也没个安装日志，有点心慌慌。这一点确实不如宝塔，不过宝塔那个日志也很卡。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0208/d58200df49b7dbdb.png" srcset="/img/loading.gif" lazyload alt="安装完成"><figcaption aria-hidden="true">安装完成</figcaption></figure></p><p>这样就安装好了，很方便。感觉比宝塔安装 Nginx 快一点。</p><h2 id="3-2-创建网站"><a href="#3-2-创建网站" class="headerlink" title="3.2. 创建网站"></a>3.2. 创建网站</h2><p>Hexo 博客是有编译静态内容的，要创建的是静态站。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0208/56e14222724a96ca.png" srcset="/img/loading.gif" lazyload alt="创建静态网站"><figcaption aria-hidden="true">创建静态网站</figcaption></figure></p><p>打码是为了防止被冲，小门小户真的耗不起。而且现在也都是套 CDN 的。</p><h2 id="3-3-HTTPS设置"><a href="#3-3-HTTPS设置" class="headerlink" title="3.3. HTTPS设置"></a>3.3. HTTPS设置</h2><p>创建完之后，先去上传证书。可惜目前 OHTTPS 还不支持 1Panel，要不然会更方便。</p><p>不过好在可以自行 API 请求 OHTTPS 下载证书，部署一个周期任务就行。我这里就不展开了。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0208/0de6619db9551e54.png" srcset="/img/loading.gif" lazyload alt="上传证书"><figcaption aria-hidden="true">上传证书</figcaption></figure></p><p>然后打开 HTTPS 设置，默认已经加载证书，直接保存即可。TLS1.0 直接不要，太 Low 了。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0208/d29e669531cbeb54.png" srcset="/img/loading.gif" lazyload alt="HTTPS设置"><figcaption aria-hidden="true">HTTPS设置</figcaption></figure></p><h2 id="3-4-git-clone-博客静态库"><a href="#3-4-git-clone-博客静态库" class="headerlink" title="3.4. git clone 博客静态库"></a>3.4. git clone 博客静态库</h2><p>博客更新手动来就行了，也用不着过于追求自动化。拒绝内耗。</p><p>通过 1Panel 获取网站路径【花括号都懂的吧】</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">/opt/1panel/apps/openresty/openresty/www/sites/&#123;xxxx.com&#125;/index<br></code></pre></td></tr></table></figure><p>Ali-C-Linux 默认是没有装 git 的，所以需要安装一下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo dnf -y install git<br></code></pre></td></tr></table></figure><p>设置 Git SSH，走 https 不稳定，而且私有库也很麻烦。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0208/2c78ac99ebf812f8.png" srcset="/img/loading.gif" lazyload alt="上传秘钥"><figcaption aria-hidden="true">上传秘钥</figcaption></figure></p><p>其实可以全部使用同一套秘钥的，我当年脑子抽了。不过这样也有好处，我只需要上传 Gitee 相关的就可以了。还有 GitHub，但是和哪一套共用秘钥我就看不出来了，得打开 config 文件才行。</p><p><strong>权限设置</strong></p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0208/6b92265fc5299e1f.png" srcset="/img/loading.gif" lazyload alt="只能拥有者读写"><figcaption class="image-caption">只能拥有者读写</figcaption></figure></div><div class="group-image-wrap"><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0208/41bebae5e18eedcb.png" srcset="/img/loading.gif" lazyload alt="其他人只能读"><figcaption class="image-caption">其他人只能读</figcaption></figure></div></div></div><div class="note note-danger">            <p><strong>紧急插播</strong></p><p>由于 1Panel 用户组是 root，所以 Git SSH 也需要 root 才行。</p><p>1Panel 文件管理直接复制粘贴即可。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0208/3dc2ad20a442673e.png" srcset="/img/loading.gif" lazyload alt="root用户"><figcaption aria-hidden="true">root用户</figcaption></figure></p><p>权限都不用改，毕竟已经改过了。</p>          </div><p>只有这样的权限设置，才能让 Git SSH 正常工作。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0208/0a2ce42a39c426f0.png" srcset="/img/loading.gif" lazyload alt="成功握手"><figcaption aria-hidden="true">成功握手</figcaption></figure></p><p>由于创建网站导致文件夹已经存在，删除后克隆再重新创建网站，会搞得很麻烦，步骤也很多。</p><p>所以使用本地创建空 git 库，添加远程库，拉取远程库的方式。</p><p>先删除网站目录中的默认文件</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0208/bf8f6af90ec29260.png" srcset="/img/loading.gif" lazyload alt="删除这两货"><figcaption aria-hidden="true">删除这两货</figcaption></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">由于文件权限组的问题，git操作全程需要root权限</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">所以直接切换到root用户</span><br>sudo -i<br>cd /opt/1panel/apps/openresty/openresty/www/sites/&#123;xxxx.com&#125;/index<br>git init<br>git remote add origin &lt;remote repository URL&gt;<br>git pull origin master<br></code></pre></td></tr></table></figure><p>执行完成之后，博客就算部署完成了。外网也可以访问了。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0208/1746221f98838d90.png" srcset="/img/loading.gif" lazyload alt="部署完成"><figcaption aria-hidden="true">部署完成</figcaption></figure></p><h1 id="5-后记"><a href="#5-后记" class="headerlink" title="5. 后记"></a>5. 后记</h1><p>至此，1Panel 的基础部署就完成了。</p><p>然后修改用户名、密码，修改端口，绑定域名，https等。</p><p>居然还有2FA（双因素身份验证），果断加上。</p><p>推荐 <a href="https://github.com/ente-io/ente">Ente Auth</a> 开源验证器，除了苹果手机没有装（因为没有ipa）。其他手机和电脑我都装了。</p><p>当年我也花过500多元，也搞过自签名的ipa包。成本实在是太高了。当然也有收费的代签名，但如果想要无缝更新，而不是删除老软件。还是得自己斥巨资加入苹果开发者。</p><h1 id="参靠文献"><a href="#参靠文献" class="headerlink" title="参靠文献"></a>参靠文献</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/20575317573">1Panel vs 宝塔面板：现代化运维工具的全方位对比 - 知乎</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.fit2cloud.com/">飞致云 - 为数字经济时代创造好软件</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://help.aliyun.com/zh/ecs/use-cases/install-and-use-docker">安装Docker并使用镜像仓库ACR_云服务器 ECS(ECS)-阿里云帮助中心</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>网站运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>运维</tag>
      
      <tag>实战</tag>
      
      <tag>部署</tag>
      
      <tag>1Panel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笔记本没有WIFI又没有蓝牙，解决过程分享</title>
    <link href="/po/a937536f7edf/"/>
    <url>/po/a937536f7edf/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>最近买了PS5的手柄，但是笔记本没有蓝牙功能了，由于固定机位直接拉的网线，所以WiFi没了一直都不知道。记录一下解决的过程，帮后人避坑，也方便以后的自己。</p><blockquote><p><strong>重要说明：</strong> 这是过程记录，包含试错过程、折腾过程。可能对别人来说有用，但是对我撰文当时的情况没有用。失败的情况，我会在子标题里写明。</p></blockquote><h1 id="1-设备信息"><a href="#1-设备信息" class="headerlink" title="1. 设备信息"></a>1. 设备信息</h1><p>笔记本：华硕天选2（FX506HM）</p><p>系统版本：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">版本Windows 11 专业工作站版<br>版本号24H2<br>安装日期2025/1/28<br>操作系统版本26100.2894<br>体验Windows 功能体验包 1000.26100.36.0<br></code></pre></td></tr></table></figure><p>WiFi 驱动：Intel(R) Wi-Fi 6 AX201 160MHz</p><p>蓝牙驱动：暂时未知</p><h1 id="2-WiFi篇"><a href="#2-WiFi篇" class="headerlink" title="2. WiFi篇"></a>2. WiFi篇</h1><h2 id="2-1-前情介绍"><a href="#2-1-前情介绍" class="headerlink" title="2.1. 前情介绍"></a>2.1. 前情介绍</h2><p>右下角的便捷管理直接没有 WiFi 以及蓝牙，飞行模式都开不了。【好家伙，还能用笔记本的 Fn 功能开启飞行模式】</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/7af956288291/7d23d4755d534485a89b6243e017f433.png" srcset="/img/loading.gif" lazyload alt="缺失功能的便捷管理"><figcaption aria-hidden="true">缺失功能的便捷管理</figcaption></figure></p><p>可以见得，由于长期不用。很多无线模块都出问题了。检查设备管理器，果不其然的黄色叹号。甚至都找不到蓝牙的驱动。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/7af956288291/34f514546fa34635b979a1871c2b5f45.png" srcset="/img/loading.gif" lazyload alt="设备黄色叹号"><figcaption aria-hidden="true">设备黄色叹号</figcaption></figure></p><h2 id="2-2-折腾的过程"><a href="#2-2-折腾的过程" class="headerlink" title="2.2. 折腾的过程"></a>2.2. 折腾的过程</h2><h3 id="2-2-1-重置网络（失败）"><a href="#2-2-1-重置网络（失败）" class="headerlink" title="2.2.1. 重置网络（失败）"></a>2.2.1. 重置网络（失败）</h3><p><figure><img src="https://cdn.vlice.cn/hexo/po/7af956288291/d1990d39ad3e41b6b7357e2a102e1278.png" srcset="/img/loading.gif" lazyload alt="重置网络"><figcaption aria-hidden="true">重置网络</figcaption></figure></p><p>点进去后，立即重置，然后重启电脑。一般的网络问题都能解决。</p><p>可惜，我的问题不行。</p><p>【重启中……】</p><p>黄色叹号，失败！</p><h3 id="2-2-2-卸载驱动并重装（失败）"><a href="#2-2-2-卸载驱动并重装（失败）" class="headerlink" title="2.2.2. 卸载驱动并重装（失败）"></a>2.2.2. 卸载驱动并重装（失败）</h3><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0204/2c1547deb3fb5b0f.png" srcset="/img/loading.gif" lazyload alt="卸载驱动"><figcaption aria-hidden="true">卸载驱动</figcaption></figure></p><p>卸载之后，先不安装驱动。先重启，然后在安装。</p><p>AX201的驱动：<a href="https://www.intel.cn/content/www/cn/zh/products/sku/130293/intel-wifi-6-ax201-gig/downloads.html">英特尔® Wi-Fi 6 AX201</a></p><p>我选择了【面向 Windows® 10 和 Windows 11* 的英特尔® 无线 Wi-Fi 驱动程序】。但并不好使，因为它还是黄色叹号！</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/7af956288291/34f514546fa34635b979a1871c2b5f45.png" srcset="/img/loading.gif" lazyload alt="设备黄色叹号"><figcaption aria-hidden="true">设备黄色叹号</figcaption></figure></p><p>直接引用上图，因为我是操作完之后，才开始撰写本文的。</p><h3 id="2-2-3-升级系统（失败）"><a href="#2-2-3-升级系统（失败）" class="headerlink" title="2.2.3. 升级系统（失败）"></a>2.2.3. 升级系统（失败）</h3><p><figure><img src="https://cdn.vlice.cn/hexo/po/7af956288291/3dd84d8668ae4e65b6247b2167d48fdc.png" srcset="/img/loading.gif" lazyload alt="升级系统"><figcaption aria-hidden="true">升级系统</figcaption></figure></p><p>我是一直保持自动更新的，但还是积攒了两个升级，现在下载完了。重启看看能不能好使吧。</p><p>【重启中……】</p><p>不顶用，还是黄色叹号。就不重复截图了，省点图片空间。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/7af956288291/34f514546fa34635b979a1871c2b5f45.png" srcset="/img/loading.gif" lazyload alt="设备黄色叹号"><figcaption aria-hidden="true">设备黄色叹号</figcaption></figure></p><h3 id="2-2-4-取消-USB-Hub-的节约用电（失败）"><a href="#2-2-4-取消-USB-Hub-的节约用电（失败）" class="headerlink" title="2.2.4. 取消 USB Hub 的节约用电（失败）"></a>2.2.4. 取消 USB Hub 的节约用电（失败）</h3><p><figure><img src="https://cdn.vlice.cn/hexo/po/7af956288291/285e1981e98c4f8bbd04afd218e36aa4.png" srcset="/img/loading.gif" lazyload alt="能取消的全都取消"><figcaption aria-hidden="true">能取消的全都取消</figcaption></figure></p><p>完事之后，重启看看效果。</p><p>【重启中……】失败！</p><h3 id="2-2-5-尝试更多的驱动（失败）"><a href="#2-2-5-尝试更多的驱动（失败）" class="headerlink" title="2.2.5. 尝试更多的驱动（失败）"></a>2.2.5. 尝试更多的驱动（失败）</h3><p>还是之前的 intel 驱动页面，上面还有其他的驱动。</p><p>AX201的驱动：<a href="https://www.intel.cn/content/www/cn/zh/products/sku/130293/intel-wifi-6-ax201-gig/downloads.html">英特尔® Wi-Fi 6 AX201</a></p><p>这次选择【面向 IT 管理员的 英特尔® PROSet&#x2F;无线软件 和 Wi-Fi 驱动程序】</p><p>完蛋，这是个压缩包，直接搞不来。虽然我是全栈开发，但硬件方面我是真不懂。</p><h3 id="2-2-6-释放静电"><a href="#2-2-6-释放静电" class="headerlink" title="2.2.6. 释放静电"></a>2.2.6. 释放静电</h3><p><a href="https://www.zhihu.com/question/358986216/answer/1027844175">无线网卡驱动显示黄色感叹号,网络适配器中没有WLAN，无法连接无线网络，该怎解决？</a></p><p>知乎上看到的，来试试看。</p><p>看评论区说买个三角插头就行了，但是华硕官配就是三角插的电源适配器</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/7af956288291/4d554fa20a09483083f9c8985dbe62d7.jpg?x-oss-process=image/crop,h_2600,y_600/resize,h_500" srcset="/img/loading.gif" lazyload alt="拔掉这些连线"><figcaption aria-hidden="true">拔掉这些连线</figcaption></figure></p><p>下面开始释放静电<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[现在的金属笔记本怎么能去静电？ - 知乎](https://www.zhihu.com/question/271818989/answer/1886617891)">[1]</span></a></sup></p><p>关机，然后拔光所有的连线，包括网线、电源线。有能力断开电池线的，可以断开电池。</p><blockquote><p><strong>免责声明：</strong> 没过保的不要打开后盖啊。会打开后盖的注意释放身体的静电啊（今天虽然是立春、六九天，但依旧属于冬季干燥阶段）小心损坏主板。</p><p>强行尝试，造成的一切损失，本人概不负责。不断开电池，多尝试几次也能放掉静电。</p></blockquote><p>准备完毕后，长按电源键20多秒。</p><p>【操作中……】</p><p>额，蓝牙回来了。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/7af956288291/ed0c88e665704f3c9a6ea2a5190f8412.png" srcset="/img/loading.gif" lazyload alt="蓝牙驱动有了"><figcaption aria-hidden="true">蓝牙驱动有了</figcaption></figure></p><p>WiFi还是黄色叹号😂</p><p>但是我的需求已经搞定了，我拉的网线，WiFi不重要。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/7af956288291/402dc1ad7d934547ad31e0aefdde31d8.png" srcset="/img/loading.gif" lazyload alt="手柄连上了"><figcaption aria-hidden="true">手柄连上了</figcaption></figure></p><hr><p>生命不息，折腾不止。</p><p>继续释放静电看看，刚才有一个细节没注意。先禁用 WiFi 驱动，然后再关机放电。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/7af956288291/51797229f3e54337b79155c57c25accb.png" srcset="/img/loading.gif" lazyload alt="禁用驱动"><figcaption aria-hidden="true">禁用驱动</figcaption></figure></p><p>【放电中……】</p><p>来了，一切都回来了！！</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/7af956288291/ce3264f9e06f4f70ae458ef4836a1cd8.png" srcset="/img/loading.gif" lazyload alt="复活吧！我的WiFi"><figcaption aria-hidden="true">复活吧！我的WiFi</figcaption></figure></p><h1 id="3-蓝牙篇"><a href="#3-蓝牙篇" class="headerlink" title="3. 蓝牙篇"></a>3. 蓝牙篇</h1><p>见 <a href="#2-2-6-%E9%87%8A%E6%94%BE%E9%9D%99%E7%94%B5">2.2.6. 释放静电</a></p><h1 id="4-番外"><a href="#4-番外" class="headerlink" title="4. 番外"></a>4. 番外</h1><p>结稿检查的时候，发现误删了一张图片。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0204/ef4f79270f014393.png" srcset="/img/loading.gif" lazyload alt="误删图片"><figcaption aria-hidden="true">误删图片</figcaption></figure></p><p>打开设备管理器，准备补截一张图，结果又是熟悉的黄色叹号！！设置里果然还是没有了WiFi，但好在蓝牙没问题。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0204/556b2763d1420034.png" srcset="/img/loading.gif" lazyload alt="黄色叹号"><figcaption aria-hidden="true">黄色叹号</figcaption></figure></p><p>我不管了，爱咋咋地吧。反正我拉网线了，哼╭(╯^╰)╮。</p><h1 id="5-参考文献"><a href="#5-参考文献" class="headerlink" title="5. 参考文献"></a>5. 参考文献</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.zhihu.com/question/271818989/answer/1886617891">现在的金属笔记本怎么能去静电？ - 知乎</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>系统故障</category>
      
      <category>WiFi修复</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows11</tag>
      
      <tag>系统修复</tag>
      
      <tag>蓝牙修复</tag>
      
      <tag>WiFi修复</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用Github Action自动化部署Hexo</title>
    <link href="/po/5c269b97fa60/"/>
    <url>/po/5c269b97fa60/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="编写工作流"><a href="#编写工作流" class="headerlink" title="编写工作流"></a>编写工作流</h1><p>由于众所周知的稳定性缘故，所以需要使用同步代理站 <strong>kkgithub.com</strong></p><p>创建完仓库，push 好之后。直接点进 <strong>Action</strong> 栏目，选择 <strong>Node.js</strong> 项目，把代码复制下来。</p><p>然后本地创建文件：.&#x2F;.github&#x2F;workflows&#x2F;hexo.yml</p><p>我这就直接放我测试通过的了。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[GitHub Actions 入门教程 - 阮一峰的网络日志](https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html)">[1]</span></a></sup><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[记录一次Hexo持续集成部署尝试-腾讯云开发者社区|Dreamy.TZK](https://cloud.tencent.com/developer/article/1651297)">[2]</span></a></sup><sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[GitHub Actions 中环境变量使用总结: 配置,读取,传递 | api2o](https://www.api2o.com/zh/blog/github/action-docker-image-environment-variables-summary)">[3]</span></a></sup></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># For more information see: https://docs.kkgithub.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs</span><br><br><span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Blog</span> <span class="hljs-string">CI</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span> [ <span class="hljs-string">&quot;master&quot;</span> ]<br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">构建</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">静态页</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br><br>    <span class="hljs-attr">strategy:</span><br>      <span class="hljs-attr">matrix:</span><br>        <span class="hljs-attr">node-version:</span> [ <span class="hljs-number">22.</span><span class="hljs-string">x</span> ]<br>        <span class="hljs-comment"># See supported Node.js release schedule at https://nodejs.org/en/about/releases/</span><br><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-number">1</span><span class="hljs-string">.检出</span> <span class="hljs-string">master</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v4</span><br><br>      <span class="hljs-comment"># 设置 NodeJS 环境</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-number">2</span><span class="hljs-string">.设置</span> <span class="hljs-string">NodeJS</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node-version</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v4</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node-version</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">cache:</span> <span class="hljs-string">&#x27;npm&#x27;</span><br><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-number">3</span><span class="hljs-string">.安装</span> <span class="hljs-string">yarn</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">yarn</span> <span class="hljs-string">-g</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-number">4</span><span class="hljs-string">.安装</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">命令行工具</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">yarn</span> <span class="hljs-string">global</span> <span class="hljs-string">add</span> <span class="hljs-string">hexo-cli</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-number">5</span><span class="hljs-string">.缓存</span> <span class="hljs-string">node_modules</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache@v4</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-string">cache-yarn</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">./node_modules</span><br>          <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;**/yarn.lock&#x27;)&#125;&#125;</span><br>          <span class="hljs-attr">restore-keys:</span> <span class="hljs-string">|</span><br><span class="hljs-string">            $&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;**/yarn.lock&#x27;)&#125;&#125;</span><br><span class="hljs-string">            $&#123;&#123;runner.OS&#125;&#125;-</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-number">5.1</span><span class="hljs-string">.缓存</span> <span class="hljs-string">public</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache@v4</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-string">cache-public</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">./public</span><br>          <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;runner.OS&#125;&#125;-public</span><br>          <span class="hljs-attr">restore-keys:</span> <span class="hljs-string">|</span><br><span class="hljs-string">            $&#123;&#123;runner.OS&#125;&#125;-public</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-number">6</span><span class="hljs-string">.配置</span> <span class="hljs-string">gitssh</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">PRIVATE:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GIT_SSH_PRIVATE</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          mkdir -p ~/.ssh/</span><br><span class="hljs-string">          echo &quot;$PRIVATE&quot; &gt; ~/.ssh/github</span><br><span class="hljs-string">          chmod 600 ~/.ssh/github</span><br><span class="hljs-string">          printf &quot;Host github.com\nHostName github.com\nIdentityFile ~/.ssh/github&quot; &gt; ~/.ssh/config</span><br><span class="hljs-string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="hljs-string">          git config --global user.name &#x27;$&#123;&#123; secrets.GIT_USER &#125;&#125;&#x27; </span><br><span class="hljs-string">          git config --global user.email &#x27;$&#123;&#123; secrets.GIT_MAIL &#125;&#125;&#x27;</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">steps.cache-yarn.outputs.cache-hit</span> <span class="hljs-type">!=</span> <span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-number">7</span><span class="hljs-string">.初始化Hexo</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">yarn</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-number">8.</span><span class="hljs-string">Hexo构建静态页</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          hexo g</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-number">9.</span><span class="hljs-string">Git</span> <span class="hljs-string">Push</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          git config --global core.autocrlf false</span><br><span class="hljs-string">          hexo deploy</span><br></code></pre></td></tr></table></figure><hr><p>敲黑板，划重点。github库设置（存放 Hexo 源码的库，不是 public 库）</p><table><thead><tr><th>变量名</th><th>含义</th></tr></thead><tbody><tr><td>GIT_SSH_PRIVATE</td><td>git ssh的私钥，直接复制即可</td></tr><tr><td>GIT_USER</td><td>git 用于提交的用户名</td></tr><tr><td>GIT_MAIL</td><td>git 用于提交的邮箱</td></tr></tbody></table><p>跟着下面两张图去找到设置变量的位置，一个一个设置就完事了。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/08712ebf88b2/7439175ac551403fb73d57748cd5de1b.png" srcset="/img/loading.gif" lazyload alt="找到位置"><figcaption aria-hidden="true">找到位置</figcaption></figure></p><p><figure><img src="https://cdn.vlice.cn/hexo/po/08712ebf88b2/809bfc6de5364bb499dfbb8f723a7c3e.png" srcset="/img/loading.gif" lazyload alt="设置变量"><figcaption aria-hidden="true">设置变量</figcaption></figure></p><p>完事直接 push 就可以了。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>我是真服了啊，<strong>deploy</strong> 得另外准备一个库【<strong>&lt;username&gt;.github.io</strong>】才行啊。得强行覆盖了。</p><p><figure><img src="https://cdn.vlice.cn/hexo/po/08712ebf88b2/af800ddea5c744a781e0ff0c57d3b56e.png" srcset="/img/loading.gif" lazyload alt="我本地的"><figcaption aria-hidden="true">我本地的</figcaption></figure></p><p><figure><img src="https://cdn.vlice.cn/hexo/po/08712ebf88b2/ff9e8529d32c44a293a13e412022df8a.png" srcset="/img/loading.gif" lazyload alt="Github上的"><figcaption aria-hidden="true">Github上的</figcaption></figure></p><p>【<strong>&lt;username&gt;.github.io</strong>】这个库是关键，博客 pages 服务靠的就是这个库，然后去又拍云做加速。</p><hr><p>体验一下流程就完事了，action 是真不好用，可能是我不太熟悉吧。public 库的 commit 不是连续的，就很难受。还是本地 deploy 来得舒服，关键是可以保留 commit 记录。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">GitHub Actions 入门教程 - 阮一峰的网络日志</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://cloud.tencent.com/developer/article/1651297">记录一次Hexo持续集成部署尝试-腾讯云开发者社区|Dreamy.TZK</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.api2o.com/zh/blog/github/action-docker-image-environment-variables-summary">GitHub Actions 中环境变量使用总结: 配置,读取,传递 | api2o</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Github</tag>
      
      <tag>自动化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo从5.3.0升级到7.3.0</title>
    <link href="/po/5b6bf2d18332/"/>
    <url>/po/5b6bf2d18332/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>那么，开始吧！按照进度一点一点写。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Hexo 升级 7.0.0 | 三分之七橙](https://umm.js.org/p/3f415d4f/)">[1]</span></a></sup></p><p>环境：Windows 11、NodeJS 20.14、Yarn</p><h1 id="替换package-json"><a href="#替换package-json" class="headerlink" title="替换package.json"></a>替换package.json</h1><p>直接照抄官方<strong>hexo-starter</strong>模板中的<strong>dependencies</strong>模块。<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[hexo-starter/package.json at master · hexojs/hexo-starter · GitHub](https://kkgithub.com/hexojs/hexo-starter/blob/master/package.json)">[2]</span></a></sup></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs diff"># 只是举个例子<br><span class="hljs-addition">+ &quot;hexo&quot;: &quot;^7.3.0&quot;,</span><br><span class="hljs-deletion">- &quot;hexo&quot;: &quot;^5.3.0&quot;,</span><br>...<br><span class="hljs-addition">+ &quot;hexo-generator-archive&quot;: &quot;^2.0.0&quot;,</span><br><span class="hljs-addition">+ &quot;hexo-generator-category&quot;: &quot;^2.0.0&quot;,</span><br><span class="hljs-deletion">- &quot;hexo-generator-archive&quot;: &quot;^1.0.0&quot;,</span><br><span class="hljs-deletion">- &quot;hexo-generator-category&quot;: &quot;^2.0.0&quot;,</span><br></code></pre></td></tr></table></figure><p>删除<code>yarn.lock</code>，完事直接<code>yarn</code>就行。</p><h1 id="升级模板"><a href="#升级模板" class="headerlink" title="升级模板"></a>升级模板</h1><p>我用的是<strong>Fluid</strong>，所以去查<strong>npmjs</strong>。大版本没有变动，上一步已经更新完成了。</p><p>直接修改<strong>package.json</strong>即可</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-addition">+ &quot;hexo-theme-fluid&quot;: &quot;^1.9.8&quot;,</span><br><span class="hljs-deletion">- &quot;hexo-theme-fluid&quot;: &quot;^1.8.7&quot;,</span><br></code></pre></td></tr></table></figure><h2 id="迁移到新模板"><a href="#迁移到新模板" class="headerlink" title="迁移到新模板"></a>迁移到新模板</h2><p>问了防止崩坏，得对模板进行测试。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Git Bash</span><br><span class="hljs-built_in">cp</span> -r ./node_modules/hexo-theme-fluid/ ./themes/fluid_new<br></code></pre></td></tr></table></figure><p>同时修改<strong>config.yml</strong>的模板配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Extensions</span><br><span class="hljs-comment">## Plugins: https://hexo.io/plugins/</span><br><span class="hljs-comment">## Themes: https://hexo.io/themes/</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid_new</span><br></code></pre></td></tr></table></figure><p>然后自己慢慢改就是了，让新老模板共存，反复测试一段时间。直到完全没有问题之后，再把老模板给删掉即可。</p><p>之后的上线发布我就不啰嗦了。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://umm.js.org/p/3f415d4f/">Hexo 升级 7.0.0 | 三分之七橙</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://kkgithub.com/hexojs/hexo-starter/blob/master/package.json">hexo-starter&#x2F;package.json at master · hexojs&#x2F;hexo-starter · GitHub</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>折腾</tag>
      
      <tag>升级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【S4个人】森林牧羊场 1:20.85 为了刷里程被迫练图</title>
    <link href="/po/e4bcf82d1e73/"/>
    <url>/po/e4bcf82d1e73/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>    <div class="bilibili-player">      <iframe src="//player.bilibili.com/player.html?aid=670904750&bvid=BV1Ha4y1n742&cid=276053719&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="800" height="725"> </iframe>    </div>    <p>游戏：跑跑卡丁车<br>系列：森林<br>地图：牧羊场<br>车辆：玉玺X<br>成绩：01:20:85<br>BGM：泠鸢yousa - 恋爱语音导航<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[【泠鸢/小野道】恋爱语音导航【原创】](https://www.bilibili.com/video/BV1ot41127e6)">[1]</span></a></sup>节选，如有侵权请联系我删除。</p><p>这张图算是手动刷里程最好的，相对不难。单次里程8.4km，记录1:17秒多点，正常跑1:30秒以内都是可以接受的。我现在刷了5小时不到，已经500+km了。</p><p>地图解析：<br>1、第一个弯过去后，面临一个选择，走左还是走右。最佳路线是走右，第一弯拖久一点，然后走两棵树中间。<br>2、经过一个飞坡，落地点控制在“路”的左侧，这样通过第二个弯（直角弯）更加舒服。<br>3、第二个选择口，是直接顺坡下去，还是飞出栅栏。可以尝试飞出栅栏，失误也没关系最后成绩在24-27左右。这里无所谓，我是为了刷成绩。<br>4、连续拖漂弯，这里要求不高，别翻车就行。玉玺X不适合跑这图，特别容易翻，这里做不到极限。<br>5、最后过桥，这里我是没经验的。多练吧，看运气。</p><p>小伙伴们，学废了吗？</p><p>森林系列：<a href="https://space.bilibili.com/20263463/channel/detail?cid=162806">https://space.bilibili.com/20263463/channel/detail?cid=162806</a></p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.bilibili.com/video/BV1ot41127e6">【泠鸢&#x2F;小野道】恋爱语音导航【原创】</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>跑跑卡丁车</category>
      
      <category>森林系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>牧羊场</tag>
      
      <tag>痕迹视频</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FastAdmin支持php7.4的教程</title>
    <link href="/po/6a1b099fe711/"/>
    <url>/po/6a1b099fe711/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>从安装到运行，一条龙走到底。</p><h2 id="1-前置"><a href="#1-前置" class="headerlink" title="1. 前置"></a>1. 前置</h2><p>默认你们已经安装了 <code>NodeJS</code> 和 <code>Composer</code>。</p><p>php命令行版本：7.4.*</p><p>ThinkPHP：5.0.24</p><h3 id="1-1-下载安装"><a href="#1-1-下载安装" class="headerlink" title="1.1. 下载安装"></a>1.1. 下载安装</h3><p><code>&gt;</code>表示执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设置过国内镜像源的请忽略</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">npm config <span class="hljs-built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装过bower的请忽略</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">npm i -g bower</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装FastAdmin</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://gitee.com/karson/fastadmin.git fa_test</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash"><span class="hljs-built_in">cd</span> fa_test</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">bower install</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">composer install</span><br></code></pre></td></tr></table></figure><h3 id="1-2-运行访问"><a href="#1-2-运行访问" class="headerlink" title="1.2. 运行访问"></a>1.2. 运行访问</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动FastAdmin</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">php -S 127.0.0.1:8080 -t public</span><br>[Tue Dec  1 19:35:46 2020] PHP 7.4.13 Development Server (http://127.0.0.1:8080) started<br><span class="hljs-meta prompt_"># </span><span class="language-bash">出现如上所述，表示 php 内置 Server 启动成功</span><br></code></pre></td></tr></table></figure><p>打开浏览器，访问<code>http://127.0.0.1:8080</code>出现安装页面。</p><p><img src="https://cdn.vlice.cn/hexo/po/2025/0204/b6cac3ae03977681.jpg" srcset="/img/loading.gif" lazyload></p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><p>数据库，管理员信息填写完成，点击安装。出现如下所述。</p><p><img src="https://cdn.vlice.cn/hexo/po/2025/0204/88c2c112e28da56d.jpg" srcset="/img/loading.gif" lazyload></p><p>php7.4开始不再支持使用花括号 <code>&#123;&#125;</code> 来访问数组和字符串成员。</p><p>出现问题就要解决，把 <code>&#123;&#125;</code> 改成 <code>[]</code> 就可以了。那么改那个文件呢？</p><p>引用一下我的开发三步走，后来人就可以站在前辈们铺好的路上了。</p><blockquote><p>第一步，debug<br>第二步，看文档<br>第三步，翻源码</p></blockquote><h3 id="2-1-开启debug"><a href="#2-1-开启debug" class="headerlink" title="2.1. 开启debug"></a>2.1. 开启debug</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash"><span class="hljs-built_in">cp</span> .env.sample .<span class="hljs-built_in">env</span></span><br></code></pre></td></tr></table></figure><p>编辑<code>.env</code>，改成如下内容。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[app]</span><br><span class="hljs-attr">debug</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">trace</span> = <span class="hljs-literal">true</span><br><br><span class="hljs-section">[database]</span><br><span class="hljs-comment"># hostname = 192.168.1.101</span><br><span class="hljs-comment"># database = fastadmin</span><br><span class="hljs-comment"># username = root</span><br><span class="hljs-comment"># password = root</span><br><span class="hljs-comment"># hostport = 3306</span><br><span class="hljs-comment"># prefix = fa_</span><br></code></pre></td></tr></table></figure><h3 id="2-2-找到错误位置"><a href="#2-2-找到错误位置" class="headerlink" title="2.2. 找到错误位置"></a>2.2. 找到错误位置</h3><p>编辑<code>application/admin/command/Install.php: 132-138行</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-variable">$adminName</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">installation</span>(<span class="hljs-variable">$mysqlHostname</span>, <span class="hljs-variable">$mysqlHostport</span>, <span class="hljs-variable">$mysqlDatabase</span>, <span class="hljs-variable">$mysqlUsername</span>, <span class="hljs-variable">$mysqlPassword</span>, <span class="hljs-variable">$mysqlPrefix</span>, <span class="hljs-variable">$adminUsername</span>, <span class="hljs-variable">$adminPassword</span>, <span class="hljs-variable">$adminEmail</span>, <span class="hljs-variable">$siteName</span>);<br>&#125; <span class="hljs-keyword">catch</span> (\PDOException <span class="hljs-variable">$e</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>());<br>&#125; <span class="hljs-keyword">catch</span> (\<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>) &#123;<br>    \think<span class="hljs-title class_">\Log</span>::<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-variable">$e</span>); <span class="hljs-comment">// 在这里打印错误日志</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$output</span>(<span class="hljs-number">0</span>, <span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>日志如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php">[ error ] think\exception<span class="hljs-title class_">\ErrorException</span>::<span class="hljs-title function_ invoke__">__set_state</span>(<span class="hljs-keyword">array</span>(<br>   <span class="hljs-string">&#x27;severity&#x27;</span> =&gt; <span class="hljs-number">8192</span>,<br>   <span class="hljs-string">&#x27;data&#x27;</span> =&gt; <br>  <span class="hljs-keyword">array</span> (<br>  ),<br>   <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;Array and string offset access syntax with curly braces is deprecated&#x27;</span>,<br>   <span class="hljs-string">&#x27;string&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>   <span class="hljs-string">&#x27;code&#x27;</span> =&gt; <span class="hljs-number">0</span>,<br>   <span class="hljs-string">&#x27;file&#x27;</span> =&gt; <span class="hljs-string">&#x27;thinkphp/library/think/db/Query.php&#x27;</span>,<br>   <span class="hljs-string">&#x27;line&#x27;</span> =&gt; <span class="hljs-number">400</span>,<br>   <span class="hljs-comment">// 后面的就可以忽略了</span><br></code></pre></td></tr></table></figure><p><code>message</code>和安装页的错误提示是一样的</p><p>错误位置是<code>thinkphp/library/think/db/Query.php</code>的400行。</p><p><img src="/./002-FastAdmin%E6%94%AF%E6%8C%81php7-4%E7%9A%84%E6%95%99%E7%A8%8B/vKMZAuOhHLTjQSR.jpg" srcset="/img/loading.gif" lazyload></p><p>找到就可以修改了，把 <code>&#123;&#125;</code> 改成 <code>[]</code> 即可。</p><h3 id="2-3-安装成功"><a href="#2-3-安装成功" class="headerlink" title="2.3. 安装成功"></a>2.3. 安装成功</h3><p>修改完后不用刷新页面，直接点击安装。安装成功！</p><p><img src="https://cdn.vlice.cn/hexo/po/2025/0204/89d304321c822f2a.jpg" srcset="/img/loading.gif" lazyload></p><h2 id="3-结尾"><a href="#3-结尾" class="headerlink" title="3. 结尾"></a>3. 结尾</h2><p>简单的用了一下，暂时还没发现别的问题。稳定性待测。</p><p>FastAdmin 支持 php7.4 教程完毕</p><p>Violet_ice紫冰 写于 2020-12-1 21:12:26</p><h2 id="4-番外"><a href="#4-番外" class="headerlink" title="4. 番外"></a>4. 番外</h2><p>写的时候发现了一个小bug。重复安装完成后，由于 <code>$adminName</code> 为空字符串。所以点进入后台是跳到前台的。</p><p>文件<code>application/admin/command/Install.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 200行</span><br><span class="hljs-variable">$adminFile</span> = ROOT_PATH . <span class="hljs-string">&#x27;public&#x27;</span> . DS . <span class="hljs-string">&#x27;admin.php&#x27;</span>;<br><span class="hljs-comment"># 下面是我加的，都重装了，入口文件还是改个名比较好。</span><br><span class="hljs-comment"># 因为本身工作目录就在public，所以不需要用chdir()。</span><br><span class="hljs-comment"># php的glob能不能使用正则，这一点我没研究明白。有没有懂行的大佬，麻烦告知一下。</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$adminFile</span>)) &#123;<br>    <span class="hljs-variable">$files</span> = <span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-string">&#x27;*.php&#x27;</span>);<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$files</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[a-zA-Z]&#123;10&#125;\.php$/&#x27;</span>, <span class="hljs-variable">$file</span>, <span class="hljs-variable">$flag</span>)) &#123;<br>            <span class="hljs-variable">$adminFile</span> = ROOT_PATH . <span class="hljs-string">&#x27;public&#x27;</span> . DS . <span class="hljs-variable">$flag</span>[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$files</span>); <span class="hljs-comment">// 数组开销比较大用完就删掉，$file字符串就无所谓了。</span><br>&#125;<br><br><span class="hljs-comment"># 248行</span><br><span class="hljs-variable">$adminName</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$adminFile</span>)) &#123;<br>    <span class="hljs-variable">$adminName</span> = <span class="hljs-title class_">Random</span>::<span class="hljs-title function_ invoke__">alpha</span>(<span class="hljs-number">10</span>) . <span class="hljs-string">&#x27;.php&#x27;</span>;<br>    <span class="hljs-title function_ invoke__">rename</span>(<span class="hljs-variable">$adminFile</span>, ROOT_PATH . <span class="hljs-string">&#x27;public&#x27;</span> . DS . <span class="hljs-variable">$adminName</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php7.4</tag>
      
      <tag>FastAdmin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人生第好几次想搞博客</title>
    <link href="/po/72e61a928269/"/>
    <url>/po/72e61a928269/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>具体是第几次，已经无从考究啦。一直执着于自己写，自己开发博客和 <code>MarkDown</code> 编辑器，但一直碌碌无为。在不写博客我就老了，截止今天（2020-12-22）我已经22岁了，没精力折腾了。这次下定决心啦，直接用成熟的博客产品。访问了几个博客，最终选择了 <a href="https://hexo.io/">Hexo</a> ，以 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a> 主题作为基础。</p><p>感谢前辈们：<a href="https://www.julydate.com/">七夏浅笑</a>、<a href="https://diygod.me/">DIYdog</a></p><h2 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h2><p><code>&gt;</code> 表示执行 <code>shell</code> 命令</p><p><code>#</code> 表示注释</p><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>我是使用是虚拟机 + Linux宝塔面板，虚拟机和宝塔的安装这里就不赘述了。请看我的教程：【web实战】Linux宝塔面板安装、【web实战】开发环境 - 虚拟机安装。</p><p>Hexo 官网：<a href="https://hexo.io/">https://hexo.io/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装Hexo脚手架</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">npm i -g hexo-cli</span><br><br>+ hexo-cli@4.2.0<br>added 65 packages from 334 contributors in 4.085s<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入宝塔web根目录</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash"><span class="hljs-built_in">cd</span> /www/wwwroot</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化Hexo项目</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">hexo init example.com</span><br><br>INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git<br>INFO  Install dependencies<br>INFO  Start blogging with Hexo!<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行Hexo</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">hexo server -i 0.0.0.0</span><br><br>INFO  Validating config<br>INFO  Start processing<br>INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.<br></code></pre></td></tr></table></figure><p>到此，Hexo就安装完成了。</p><p>但不是我想要的效果，指定<code>ip</code>为<code>0.0.0.0</code>被替换了。</p><h2 id="解决ip问题"><a href="#解决ip问题" class="headerlink" title="解决ip问题"></a>解决ip问题</h2><p>直接翻阅<code>hexo-server</code>源代码，找到了问题所在。</p><p>文件：<code>node_modules/hexo-server/lib/server.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">formatAddress</span>(<span class="hljs-params">ip, port, root</span>) &#123;<br>  <span class="hljs-keyword">let</span> hostname = ip;<br>  <span class="hljs-keyword">if</span> (ip === <span class="hljs-string">&#x27;0.0.0.0&#x27;</span> || ip === <span class="hljs-string">&#x27;::&#x27;</span>) &#123;<br>    hostname = <span class="hljs-string">&#x27;localhost&#x27;</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> url.<span class="hljs-title function_">format</span>(&#123;<span class="hljs-attr">protocol</span>: <span class="hljs-string">&#x27;http&#x27;</span>, <span class="hljs-attr">hostname</span>: hostname, <span class="hljs-attr">port</span>: port, <span class="hljs-attr">path</span>: root&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Hexo</code> 团队为什么这么做呢，可能是为了所谓的安全吧。</p><p>翻阅 <code>server.js</code> 的 <a href="https://github.com/hexojs/hexo-server/commits/2.0.0/lib/server.js">Commit History</a>，找到了对应修改记录。</p><blockquote><p>Commit <a href="https://github.com/hexojs/hexo-server/commit/4103a759e406ed4d9cda123ae6afe8a77f8f9432">4103a759e4</a></p><p><strong>Add options and some improvements</strong></p><ul><li>Add “compress” option: Enable GZIP compression</li><li>Add “header” option: Add “X-Powered-By: Hexo” header</li><li>Display “0.0.0.0” as “localhost”</li><li>Use supertest-promised in tests</li></ul></blockquote><blockquote><p>Commit <a href="https://github.com/hexojs/hexo-server/commit/5efada50abab6d611ad2aaba8a3fb344ebc7b326">5efada50ab</a></p><p><strong>Serve on all interfaces by default</strong></p><p>This commit changes the default value of the <code>--ip</code> option to use<br>Node’s internal resolution. It means that it will try to bind to<br>the unspecified IPv6 address <code>::</code> if available or else fall back to the<br>unspecified IPv4 address <code>0.0.0.0</code>. In most systems, <code>::</code> also binds<br>to <code>0.0.0.0</code> which effectively allows to listen on all interfaces.</p></blockquote><p>找到了重点：Display “0.0.0.0” as “localhost”</p><p>这个做法就是不让外网访问，为了小白而考虑的所谓的安全。</p><p>不会吧，不会真有人不使用静态访问吧？！</p><p>直接把替换判断注释掉就可以了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">formatAddress</span>(<span class="hljs-params">ip, port, root</span>) &#123;<br>  <span class="hljs-keyword">let</span> hostname = ip;<br>  <span class="hljs-comment">// if (ip === &#x27;0.0.0.0&#x27; || ip === &#x27;::&#x27;) &#123;</span><br>  <span class="hljs-comment">//   hostname = &#x27;localhost&#x27;;</span><br>  <span class="hljs-comment">// &#125;</span><br><br>  <span class="hljs-keyword">return</span> url.<span class="hljs-title function_">format</span>(&#123;<span class="hljs-attr">protocol</span>: <span class="hljs-string">&#x27;http&#x27;</span>, <span class="hljs-attr">hostname</span>: hostname, <span class="hljs-attr">port</span>: port, <span class="hljs-attr">path</span>: root&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="最终成果"><a href="#最终成果" class="headerlink" title="最终成果"></a>最终成果</h2><p><figure><img src="https://cdn.vlice.cn/hexo/po/2025/0204/ea1e696ce5841510.jpg" srcset="/img/loading.gif" lazyload alt="最终成果"><figcaption aria-hidden="true">最终成果</figcaption></figure></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
